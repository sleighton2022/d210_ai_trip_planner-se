find_activity_task:
  description: >
    Research and find cool things to do near {destination} between {start_date} and {end_date}.
    You must select the best {num_activities} activities.
    Focus on key attractions, fun activities, and special events that meet the following requirements:    
    {activity_requirements}

    User Preferences:
    - destination: {destination}
    - hotel location: {hotel_location}
    - interests: {interests}
    - start_date: {start_date}
    - end_date: {end_date}
    - trip_duration: {trip_duration}
    - num_activities: {num_activities}
    - by_weather: {by_weather}
    - by_traffic: {by_traffic}
    - by_family_friendly: {by_family_friendly}
    - by_safety: {by_safety}
    - by_cost: {by_cost}
    - min_rating: {min_rating}
  expected_output: >
    A list with at least {num_activities} activities.
    Each entry should include the activity name and location (address).


find_nearby_restaurant_task:
  description: >
    For each activity in the given activities, identify and recommend the best **one** restaurant located nearby. 
    The selected restaurant must meet the following requirements:
    - The restaurant must be within a reasonable distance from the activity location.
    - The restaurant must be open during the activity time.
    - The restuarant must not be repeated for different activities.
    - Prioritize highly rated and well-reviewed restaurant.
    - Avoid low-quality establishments unless no other options are available.
    {restaurant_requirements}

  expected_output: >    
    You must obtain the best **one** restaurant per activity location.
    The selected restaurant must include the name (restaurant name), location (restaurant address), cuisine type (e.g. Mexican, American), and category (Restaurant).
    The final output should an associations between activity name and recommended restaurant.
    Example Output: 
    [
      {"activity_name": "Universal Studios Hollywood", "nearby_restaurant": restaurant1},
      {"activity_name": "Hollywood Walk of Fame", "nearby_restaurant": restaurant2},
      ...
    ]


find_weather_forecast_task:
  description: >
    Provide hourly weather forecast for {destination} from {start_date} to {end_date}.
        
  expected_output: >
    A list of hourly weather forecast.
    Each weather forcast information should include forcast date and time, temperature, WMO Weather Code, and weather description.


plan_activity_task:
  description: > 
    Generate a {trip_duration}-day optimized itinerary for {destination} from {start_date} to {end_date}, considering only the provided activities and weather information data. The traveler will be staying at {hotel_location} and using a rental car.  
    Planning Requirements:
    - Create a detailed daily itinerary from 9:00 AM to 9:00 PM, ensuring a balanced mix of day and evening activities.
    - Select only the best activities from the provided recommended activities list. Do not fetch or infer any external data.
    - The plan activities must cover the entire day and be well-distributed.
    - Do not plan an activity that exceeds 3 hours.
    - Each day must include a lunch and dinner break with a recommended restaurant nearby the activity location.
    - Use the information in activity_to_restaurant_assocs to select the dining option.
    - Do not repeat activities or dining venues throughout the trip.
    - Use the weather and planned activities to suggest appropriate packing items for the trip.
    {weather_requirements}
    {traffic_requirements}
  
  expected_output: >
    The itinerary should be clear, concise, and well-structured, avoiding unnecessary filler. 
    Organize days with activities, detailed activity info, dining options, and packing lists. Each day should include:
    - Date and Daily Theme
    - Activities with details:
      - Time, name, location
      - Description, suitability, rating, review highlights
      - Weather (retrieved using the assistantâ€™s Search Tool)
      - Driving information
    - One restaurant (activity) recommendation for lunch with restaurant name, location, cuisine type, and category
    - One restaurant (activity) recommendation for dinner with restaurant name, location, cuisine type, and category
    - Return-to-hotel driving info
    - A comprehensive packing list based on all planned activities
    Ensure the itinerary is practical, informative, and user-friendly.


generate_route_planning_input_task:
  description: >
    Use the provided tool to generate a json document.
    Do not fetch or infer any external data, just use the provided tool to do the job.
    User Preferences:
    - destination: {destination}
    - hotel location: {hotel_location}
    - interests: {interests}
    - start_date: {start_date}
    - end_date: {end_date}
    - trip_duration: {trip_duration}
    - by_weather: {by_weather}
    - by_traffic: {by_traffic}
    - by_family_friendly: {by_family_friendly}
    - by_safety: {by_safety}
    - by_cost: {by_cost}
    - min_rating: {min_rating}    
  expected_output: >
    The output should be a structured json document.  


load_route_planning_input_task:
  description: >
    Gather and organize all necessary information for the trip planning process.
    You must use the provided tool to load the input.

  expected_output: >
    The response contains the following information:
    1. user_preferences: A dictionary of user preferences
    2. recommended_activities: A list of recommended activities
    3. activity_to_restaurant_assocs: A list of associations between activity name and recommended restaurants.
    4. weather_forecasts: A list of weather forecasts